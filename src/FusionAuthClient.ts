/*
* Copyright (c) 2019, FusionAuth, All Rights Reserved
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
* either express or implied. See the License for the specific
* language governing permissions and limitations under the License.
*/

import {ClientResponse, IRESTClient, IRESTClientBuilder} from "./IRESTClient"
import {DefaultRESTClientBuilder} from "./DefaultRESTClientBuilder";

export class FusionAuthClient {

  public clientBuilder: IRESTClientBuilder = new DefaultRESTClientBuilder();

  constructor(public apiKey: string, public host: string) {
  }

  /**
   * Takes an action on a user. The user being actioned is called the "actionee" and the user taking the action is called the
   * "actioner". Both user ids are required. You pass the actionee's user id into the method and the actioner's is put into the
   * request object.
   *
   * @param {string} actioneeUserId The actionee's user id.
   * @param {Object} request The action request that includes all of the information about the action being taken including
   *    the id of the action, any options and the duration (if applicable).
   */
  actionUser(actioneeUserId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/action')
        .withUriSegment(actioneeUserId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Cancels the user action.
   *
   * @param {string} actionId The action id of the action to cancel.
   * @param {Object} request The action request that contains the information about the cancellation.
   */
  cancelAction(actionId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/action')
        .withUriSegment(actionId)
        .withJSONBody(request)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Changes a user's password using the change password Id. This usually occurs after an email has been sent to the user
   * and they clicked on a link to reset their password.
   *
   * @param {string} changePasswordId The change password Id used to find the user. This value is generated by FusionAuth once the change password workflow has been initiated.
   * @param {Object} request The change password request that contains all of the information used to change the password.
   */
  changePassword(changePasswordId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/change-password')
        .withUriSegment(changePasswordId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Changes a user's password using their identity (login id and password). Using a loginId instead of the changePasswordId
   * bypasses the email verification and allows a password to be changed directly without first calling the #forgotPassword
   * method.
   *
   * @param {Object} request The change password request that contains all of the information used to change the password.
   */
  changePasswordByIdentity(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/change-password')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Adds a comment to the user's account.
   *
   * @param {Object} request The request object that contains all of the information used to create the user comment.
   */
  commentOnUser(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/comment')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates an application. You can optionally specify an Id for the application, if not provided one will be generated.
   *
   * @param {string} applicationId (Optional) The Id to use for the application. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the application.
   */
  createApplication(applicationId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a new role for an application. You must specify the id of the application you are creating the role for.
   * You can optionally specify an Id for the role inside the ApplicationRole object itself, if not provided one will be generated.
   *
   * @param {string} applicationId The Id of the application to create the role on.
   * @param {string} roleId (Optional) The Id of the role. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the application role.
   */
  createApplicationRole(applicationId: string, roleId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withUriSegment("role")
        .withUriSegment(roleId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates an audit log with the message and user name (usually an email). Audit logs should be written anytime you
   * make changes to the FusionAuth database. When using the FusionAuth App web interface, any changes are automatically
   * written to the audit log. However, if you are accessing the API, you must write the audit logs yourself.
   *
   * @param {Object} request The request object that contains all of the information used to create the audit log entry.
   */
  createAuditLog(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/system/audit-log')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates an email template. You can optionally specify an Id for the template, if not provided one will be generated.
   *
   * @param {string} emailTemplateId (Optional) The Id for the template. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the email template.
   */
  createEmailTemplate(emailTemplateId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/email/template')
        .withUriSegment(emailTemplateId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a group. You can optionally specify an Id for the group, if not provided one will be generated.
   *
   * @param {string} groupId (Optional) The Id for the group. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the group.
   */
  createGroup(groupId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/group')
        .withUriSegment(groupId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a member in a group.
   *
   * @param {Object} request The request object that contains all of the information used to create the group member(s).
   */
  createGroupMembers(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/group/member')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates an identity provider. You can optionally specify an Id for the identity provider, if not provided one will be generated.
   *
   * @param {string} identityProviderId (Optional) The Id of the identity provider. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the identity provider.
   */
  createIdentityProvider(identityProviderId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/identity-provider')
        .withUriSegment(identityProviderId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a Lambda. You can optionally specify an Id for the lambda, if not provided one will be generated.
   *
   * @param {string} lambdaId (Optional) The Id for the lambda. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the lambda.
   */
  createLambda(lambdaId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/lambda')
        .withUriSegment(lambdaId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a tenant. You can optionally specify an Id for the tenant, if not provided one will be generated.
   *
   * @param {string} tenantId (Optional) The Id for the tenant. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the tenant.
   */
  createTenant(tenantId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/tenant')
        .withUriSegment(tenantId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a user. You can optionally specify an Id for the user, if not provided one will be generated.
   *
   * @param {string} userId (Optional) The Id for the user. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the user.
   */
  createUser(userId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a user action. This action cannot be taken on a user until this call successfully returns. Anytime after
   * that the user action can be applied to any user.
   *
   * @param {string} userActionId (Optional) The Id for the user action. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the user action.
   */
  createUserAction(userActionId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a user reason. This user action reason cannot be used when actioning a user until this call completes
   * successfully. Anytime after that the user action reason can be used.
   *
   * @param {string} userActionReasonId (Optional) The Id for the user action reason. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the user action reason.
   */
  createUserActionReason(userActionReasonId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action-reason')
        .withUriSegment(userActionReasonId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Creates a webhook. You can optionally specify an Id for the webhook, if not provided one will be generated.
   *
   * @param {string} webhookId (Optional) The Id for the webhook. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the webhook.
   */
  createWebhook(webhookId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/webhook')
        .withUriSegment(webhookId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Deactivates the application with the given Id.
   *
   * @param {string} applicationId The Id of the application to deactivate.
   */
  deactivateApplication(applicationId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deactivates the user with the given Id.
   *
   * @param {string} userId The Id of the user to deactivate.
   */
  deactivateUser(userId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deactivates the user action with the given Id.
   *
   * @param {string} userActionId The Id of the user action to deactivate.
   */
  deactivateUserAction(userActionId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deactivates the users with the given ids.
   *
   * @param {Array<string>} userIds The ids of the users to deactivate.
   */
  deactivateUsers(userIds: Array<string>): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/bulk')
        .withParameter('userId', userIds)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Hard deletes an application. This is a dangerous operation and should not be used in most circumstances. This will
   * delete the application, any registrations for that application, metrics and reports for the application, all the
   * roles for the application, and any other data associated with the application. This operation could take a very
   * long time, depending on the amount of data in your database.
   *
   * @param {string} applicationId The Id of the application to delete.
   */
  deleteApplication(applicationId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withParameter('hardDelete', true)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Hard deletes an application role. This is a dangerous operation and should not be used in most circumstances. This
   * permanently removes the given role from all users that had it.
   *
   * @param {string} applicationId The Id of the application to deactivate.
   * @param {string} roleId The Id of the role to delete.
   */
  deleteApplicationRole(applicationId: string, roleId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withUriSegment("role")
        .withUriSegment(roleId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the email template for the given Id.
   *
   * @param {string} emailTemplateId The Id of the email template to delete.
   */
  deleteEmailTemplate(emailTemplateId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/email/template')
        .withUriSegment(emailTemplateId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the group for the given Id.
   *
   * @param {string} groupId The Id of the group to delete.
   */
  deleteGroup(groupId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/group')
        .withUriSegment(groupId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Removes users as members of a group.
   *
   * @param {Object} request The member request that contains all of the information used to remove members to the group.
   */
  deleteGroupMembers(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/group/member')
        .withJSONBody(request)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the identity provider for the given Id.
   *
   * @param {string} identityProviderId The Id of the identity provider to delete.
   */
  deleteIdentityProvider(identityProviderId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/identity-provider')
        .withUriSegment(identityProviderId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the key for the given Id.
   *
   * @param {string} keyOd The Id of the key to delete.
   */
  deleteKey(keyOd: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/key')
        .withUriSegment(keyOd)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the lambda for the given Id.
   *
   * @param {string} lambdaId The Id of the lambda to delete.
   */
  deleteLambda(lambdaId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/lambda')
        .withUriSegment(lambdaId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the user registration for the given user and application.
   *
   * @param {string} userId The Id of the user whose registration is being deleted.
   * @param {string} applicationId The Id of the application to remove the registration for.
   */
  deleteRegistration(userId: string, applicationId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/registration')
        .withUriSegment(userId)
        .withUriSegment(applicationId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the tenant for the given Id.
   *
   * @param {string} tenantId The Id of the tenant to delete.
   */
  deleteTenant(tenantId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/tenant')
        .withUriSegment(tenantId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the user for the given Id. This permanently deletes all information, metrics, reports and data associated
   * with the user.
   *
   * @param {string} userId The Id of the user to delete.
   */
  deleteUser(userId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withParameter('hardDelete', true)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the user action for the given Id. This permanently deletes the user action and also any history and logs of
   * the action being applied to any users.
   *
   * @param {string} userActionId The Id of the user action to delete.
   */
  deleteUserAction(userActionId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withParameter('hardDelete', true)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the user action reason for the given Id.
   *
   * @param {string} userActionReasonId The Id of the user action reason to delete.
   */
  deleteUserActionReason(userActionReasonId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action-reason')
        .withUriSegment(userActionReasonId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the users with the given ids.
   *
   * @param {Object} request The ids of the users to delete.
   */
  deleteUsers(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/bulk')
        .withJSONBody(request)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Deletes the webhook for the given Id.
   *
   * @param {string} webhookId The Id of the webhook to delete.
   */
  deleteWebhook(webhookId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/webhook')
        .withUriSegment(webhookId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Disable Two Factor authentication for a user.
   *
   * @param {string} userId The Id of the User for which you're disabling Two Factor authentication.
   * @param {string} code The Two Factor code used verify the the caller knows the Two Factor secret.
   */
  disableTwoFactor(userId: string, code: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/two-factor')
        .withParameter('userId', userId)
        .withParameter('code', code)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Enable Two Factor authentication for a user.
   *
   * @param {string} userId The Id of the user to enable Two Factor authentication.
   * @param {Object} request The two factor enable request information.
   */
  enableTwoFactor(userId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/two-factor')
        .withUriSegment(userId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Exchange a refresh token for a new JWT.
   *
   * @param {Object} request The refresh request.
   */
  exchangeRefreshTokenForJWT(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/jwt/refresh')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Begins the forgot password sequence, which kicks off an email to the user so that they can reset their password.
   *
   * @param {Object} request The request that contains the information about the user so that they can be emailed.
   */
  forgotPassword(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/forgot-password')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Generate a new Email Verification Id to be used with the Verify Email API. This API will not attempt to send an
   * email to the User. This API may be used to collect the verificationId for use with a third party system.
   *
   * @param {string} email The email address of the user that needs a new verification email.
   */
  generateEmailVerificationId(email: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/verify-email')
        .withParameter('email', email)
        .withParameter('sendVerifyPasswordEmail', false)
        .withMethod("PUT")
        .go();
  }

  /**
   * Generate a new RSA or EC key pair or an HMAC secret.
   *
   * @param {string} keyId (Optional) The Id for the key. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the key.
   */
  generateKey(keyId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/key/generate')
        .withUriSegment(keyId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Generate a new Application Registration Verification Id to be used with the Verify Registration API. This API will not attempt to send an
   * email to the User. This API may be used to collect the verificationId for use with a third party system.
   *
   * @param {string} email The email address of the user that needs a new verification email.
   * @param {string} applicationId The Id of the application to be verified.
   */
  generateRegistrationVerificationId(email: string, applicationId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/verify-registration')
        .withParameter('email', email)
        .withParameter('sendVerifyPasswordEmail', false)
        .withParameter('applicationId', applicationId)
        .withMethod("PUT")
        .go();
  }

  /**
   * Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
   * both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
   * application such as Google Authenticator.
   *
   */
  generateTwoFactorSecret(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/two-factor/secret')
        .withMethod("GET")
        .go();
  }

  /**
   * Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
   * both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
   * application such as Google Authenticator.
   *
   * @param {string} encodedJWT The encoded JWT (access token).
   */
  generateTwoFactorSecretUsingJWT(encodedJWT: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/two-factor/secret')
        .withAuthorization('JWT ' + encodedJWT)
        .withMethod("GET")
        .go();
  }

  /**
   * Handles login via third-parties including Social login, external OAuth and OpenID Connect, and other
   * login systems.
   *
   * @param {Object} request The third-party login request that contains information from the third-party login
   *    providers that FusionAuth uses to reconcile the user's account.
   */
  identityProviderLogin(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/identity-provider/login')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Import an existing RSA or EC key pair or an HMAC secret.
   *
   * @param {string} keyId (Optional) The Id for the key. If not provided a secure random UUID will be generated.
   * @param {Object} request The request object that contains all of the information used to create the key.
   */
  importKey(keyId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/key/import')
        .withUriSegment(keyId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Bulk imports multiple users. This does some validation, but then tries to run batch inserts of users. This reduces
   * latency when inserting lots of users. Therefore, the error response might contain some information about failures,
   * but it will likely be pretty generic.
   *
   * @param {Object} request The request that contains all of the information about all of the users to import.
   */
  importUsers(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/import')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Issue a new access token (JWT) for the requested Application after ensuring the provided JWT is valid. A valid
   * access token is properly signed and not expired.
   * <p>
   * This API may be used in an SSO configuration to issue new tokens for another application after the user has
   * obtained a valid token from authentication.
   *
   * @param {string} applicationId The Application Id for which you are requesting a new access token be issued.
   * @param {string} encodedJWT The encoded JWT (access token).
   */
  issueJWT(applicationId: string, encodedJWT: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/jwt/issue')
        .withAuthorization('JWT ' + encodedJWT)
        .withParameter('applicationId', applicationId)
        .withMethod("GET")
        .go();
  }

  /**
   * Logs a user in.
   *
   * @param {Object} request The login request that contains the user credentials used to log them in.
   */
  login(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/login')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Sends a ping to FusionAuth indicating that the user was automatically logged into an application. When using
   * FusionAuth's SSO or your own, you should call this if the user is already logged in centrally, but accesses an
   * application where they no longer have a session. This helps correctly track login counts, times and helps with
   * reporting.
   *
   * @param {string} userId The Id of the user that was logged in.
   * @param {string} applicationId The Id of the application that they logged into.
   * @param {string} callerIPAddress (Optional) The IP address of the end-user that is logging in. If a null value is provided
   *    the IP address will be that of the client or last proxy that sent the request.
   */
  loginPing(userId: string, applicationId: string, callerIPAddress: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/login')
        .withUriSegment(userId)
        .withUriSegment(applicationId)
        .withParameter('ipAddress', callerIPAddress)
        .withMethod("PUT")
        .go();
  }

  /**
   * The Logout API is intended to be used to remove the refresh token and access token cookies if they exist on the
   * client and revoke the refresh token stored. This API does nothing if the request does not contain an access
   * token or refresh token cookies.
   *
   * @param {Object} global When this value is set to true all of the refresh tokens issued to the owner of the
   *    provided token will be revoked.
   * @param {string} refreshToken (Optional) The refresh_token as a request parameter instead of coming in via a cookie.
   *    If provided this takes precedence over the cookie.
   */
  logout(global, refreshToken: string): Promise<ClientResponse> {
    return this.start()
        .withHeader('Content-Type', 'text/plain')
        .withUri('/api/logout')
        .withParameter('global', global)
        .withParameter('refreshToken', refreshToken)
        .withMethod("POST")
        .go();
  }

  /**
   * Retrieves the identity provider for the given domain. A 200 response code indicates the domain is managed
   * by a registered identity provider. A 404 indicates the domain is not managed.
   *
   * @param {string} domain The domain or email address to lookup.
   */
  lookupIdentityProvider(domain: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/identity-provider/lookup')
        .withParameter('domain', domain)
        .withMethod("GET")
        .go();
  }

  /**
   * Modifies a temporal user action by changing the expiration of the action and optionally adding a comment to the
   * action.
   *
   * @param {string} actionId The Id of the action to modify. This is technically the user action log id.
   * @param {Object} request The request that contains all of the information about the modification.
   */
  modifyAction(actionId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/action')
        .withUriSegment(actionId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Complete a login request using a passwordless code
   *
   * @param {Object} request The passwordless login request that contains all of the information used to complete login.
   */
  passwordlessLogin(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/passwordless/login')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Reactivates the application with the given Id.
   *
   * @param {string} applicationId The Id of the application to reactivate.
   */
  reactivateApplication(applicationId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withParameter('reactivate', true)
        .withMethod("PUT")
        .go();
  }

  /**
   * Reactivates the user with the given Id.
   *
   * @param {string} userId The Id of the user to reactivate.
   */
  reactivateUser(userId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withParameter('reactivate', true)
        .withMethod("PUT")
        .go();
  }

  /**
   * Reactivates the user action with the given Id.
   *
   * @param {string} userActionId The Id of the user action to reactivate.
   */
  reactivateUserAction(userActionId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withParameter('reactivate', true)
        .withMethod("PUT")
        .go();
  }

  /**
   * Reconcile a User to FusionAuth using JWT issued from another Identity Provider.
   *
   * @param {Object} request The reconcile request that contains the data to reconcile the User.
   */
  reconcileJWT(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/jwt/reconcile')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Registers a user for an application. If you provide the User and the UserRegistration object on this request, it
   * will create the user as well as register them for the application. This is called a Full Registration. However, if
   * you only provide the UserRegistration object, then the user must already exist and they will be registered for the
   * application. The user id can also be provided and it will either be used to look up an existing user or it will be
   * used for the newly created User.
   *
   * @param {string} userId (Optional) The Id of the user being registered for the application and optionally created.
   * @param {Object} request The request that optionally contains the User and must contain the UserRegistration.
   */
  register(userId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/registration')
        .withUriSegment(userId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Re-sends the verification email to the user.
   *
   * @param {string} email The email address of the user that needs a new verification email.
   */
  resendEmailVerification(email: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/verify-email')
        .withParameter('email', email)
        .withMethod("PUT")
        .go();
  }

  /**
   * Re-sends the application registration verification email to the user.
   *
   * @param {string} email The email address of the user that needs a new verification email.
   * @param {string} applicationId The Id of the application to be verified.
   */
  resendRegistrationVerification(email: string, applicationId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/verify-registration')
        .withParameter('email', email)
        .withParameter('applicationId', applicationId)
        .withMethod("PUT")
        .go();
  }

  /**
   * Retrieves a single action log (the log of a user action that was taken on a user previously) for the given Id.
   *
   * @param {string} actionId The Id of the action to retrieve.
   */
  retrieveAction(actionId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/action')
        .withUriSegment(actionId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the actions for the user with the given Id. This will return all time based actions that are active,
   * and inactive as well as non-time based actions.
   *
   * @param {string} userId The Id of the user to fetch the actions for.
   */
  retrieveActions(userId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/action')
        .withParameter('userId', userId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the actions for the user with the given Id that are currently preventing the User from logging in.
   *
   * @param {string} userId The Id of the user to fetch the actions for.
   */
  retrieveActionsPreventingLogin(userId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/action')
        .withParameter('userId', userId)
        .withParameter('preventingLogin', true)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the actions for the user with the given Id that are currently active.
   * An active action means one that is time based and has not been canceled, and has not ended.
   *
   * @param {string} userId The Id of the user to fetch the actions for.
   */
  retrieveActiveActions(userId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/action')
        .withParameter('userId', userId)
        .withParameter('active', true)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the application for the given id or all of the applications if the id is null.
   *
   * @param {string} applicationId (Optional) The application id.
   */
  retrieveApplication(applicationId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the applications.
   *
   */
  retrieveApplications(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/application')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves a single audit log for the given Id.
   *
   * @param {number} auditLogId The Id of the audit log to retrieve.
   */
  retrieveAuditLog(auditLogId: number): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/system/audit-log')
        .withUriSegment(auditLogId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the daily active user report between the two instants. If you specify an application id, it will only
   * return the daily active counts for that application.
   *
   * @param {string} applicationId (Optional) The application id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   */
  retrieveDailyActiveReport(applicationId: string, start: number, end: number): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/report/daily-active-user')
        .withParameter('applicationId', applicationId)
        .withParameter('start', start)
        .withParameter('end', end)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the email template for the given Id. If you don't specify the id, this will return all of the email templates.
   *
   * @param {string} emailTemplateId (Optional) The Id of the email template.
   */
  retrieveEmailTemplate(emailTemplateId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/email/template')
        .withUriSegment(emailTemplateId)
        .withMethod("GET")
        .go();
  }

  /**
   * Creates a preview of the email template provided in the request. This allows you to preview an email template that
   * hasn't been saved to the database yet. The entire email template does not need to be provided on the request. This
   * will create the preview based on whatever is given.
   *
   * @param {Object} request The request that contains the email template and optionally a locale to render it in.
   */
  retrieveEmailTemplatePreview(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/email/template/preview')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Retrieves all of the email templates.
   *
   */
  retrieveEmailTemplates(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/email/template')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves a single event log for the given Id.
   *
   * @param {number} eventLogId The Id of the event log to retrieve.
   */
  retrieveEventLog(eventLogId: number): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/system/event-log')
        .withUriSegment(eventLogId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the families that a user belongs to, which could be an empty list.
   *
   * @param {string} userId The User's id
   */
  retrieveFamilies(userId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/family')
        .withParameter('userId', userId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the members of a family by the unique Family Id.
   *
   * @param {string} familyId The unique Id of the Family.
   */
  retrieveFamilyMembersByFamilyId(familyId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/family')
        .withUriSegment(familyId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the group for the given Id.
   *
   * @param {string} groupId The Id of the group.
   */
  retrieveGroup(groupId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/group')
        .withUriSegment(groupId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the groups.
   *
   */
  retrieveGroups(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/group')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the identity provider for the given id or all of the identity providers if the id is null.
   *
   * @param {string} identityProviderId (Optional) The identity provider id.
   */
  retrieveIdentityProvider(identityProviderId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/identity-provider')
        .withUriSegment(identityProviderId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the identity providers.
   *
   */
  retrieveIdentityProviders(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/identity-provider')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the actions for the user with the given Id that are currently inactive.
   * An inactive action means one that is time based and has been canceled or has expired, or is not time based.
   *
   * @param {string} userId The Id of the user to fetch the actions for.
   */
  retrieveInactiveActions(userId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/action')
        .withParameter('userId', userId)
        .withParameter('active', false)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the applications that are currently inactive.
   *
   */
  retrieveInactiveApplications(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/application')
        .withParameter('inactive', true)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the user actions that are currently inactive.
   *
   */
  retrieveInactiveUserActions(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action')
        .withParameter('inactive', true)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the available integrations.
   *
   */
  retrieveIntegration(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/integration')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the Public Key configured for verifying JSON Web Tokens (JWT) by the key Id. If the key Id is provided a
   * single public key will be returned if one is found by that id. If the optional parameter key Id is not provided all
   * public keys will be returned.
   *
   * @param {string} keyId (Optional) The Id of the public key.
   */
  retrieveJWTPublicKey(keyId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/jwt/public-key')
        .withUriSegment(keyId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all Public Keys configured for verifying JSON Web Tokens (JWT).
   *
   */
  retrieveJWTPublicKeys(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/jwt/public-key')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the key for the given Id.
   *
   * @param {string} keyId The Id of the key.
   */
  retrieveKey(keyId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/key')
        .withUriSegment(keyId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the keys.
   *
   */
  retrieveKeys(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/key')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the lambda for the given Id.
   *
   * @param {string} lambdaId The Id of the lambda.
   */
  retrieveLambda(lambdaId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/lambda')
        .withUriSegment(lambdaId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the lambdas.
   *
   */
  retrieveLambdas(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/lambda')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the lambdas for the provided type.
   *
   * @param {Object} type The type of the lambda to return.
   */
  retrieveLambdasByType(type): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/lambda')
        .withParameter('type', type)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the login report between the two instants. If you specify an application id, it will only return the
   * login counts for that application.
   *
   * @param {string} applicationId (Optional) The application id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   */
  retrieveLoginReport(applicationId: string, start: number, end: number): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/report/login')
        .withParameter('applicationId', applicationId)
        .withParameter('start', start)
        .withParameter('end', end)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the monthly active user report between the two instants. If you specify an application id, it will only
   * return the monthly active counts for that application.
   *
   * @param {string} applicationId (Optional) The application id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   */
  retrieveMonthlyActiveReport(applicationId: string, start: number, end: number): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/report/monthly-active-user')
        .withParameter('applicationId', applicationId)
        .withParameter('start', start)
        .withParameter('end', end)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the Oauth2 configuration for the application for the given Application Id.
   *
   * @param {string} applicationId The Id of the Application to retrieve OAuth configuration.
   */
  retrieveOauthConfiguration(applicationId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withUriSegment("oauth-configuration")
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the password validation rules.
   *
   */
  retrievePasswordValidationRules(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/system-configuration/password-validation-rules')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the last number of login records.
   *
   * @param {number} offset The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.
   * @param {number} limit (Optional, defaults to 10) The number of records to retrieve.
   */
  retrieveRecentLogins(offset: number, limit: number): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/recent-login')
        .withParameter('offset', offset)
        .withParameter('limit', limit)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the refresh tokens that belong to the user with the given Id.
   *
   * @param {string} userId The Id of the user.
   */
  retrieveRefreshTokens(userId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/jwt/refresh')
        .withParameter('userId', userId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user registration for the user with the given id and the given application id.
   *
   * @param {string} userId The Id of the user.
   * @param {string} applicationId The Id of the application.
   */
  retrieveRegistration(userId: string, applicationId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/registration')
        .withUriSegment(userId)
        .withUriSegment(applicationId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the registration report between the two instants. If you specify an application id, it will only return
   * the registration counts for that application.
   *
   * @param {string} applicationId (Optional) The application id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   */
  retrieveRegistrationReport(applicationId: string, start: number, end: number): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/report/registration')
        .withParameter('applicationId', applicationId)
        .withParameter('start', start)
        .withParameter('end', end)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the system configuration.
   *
   */
  retrieveSystemConfiguration(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/system-configuration')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the tenant for the given Id.
   *
   * @param {string} tenantId The Id of the tenant.
   */
  retrieveTenant(tenantId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/tenant')
        .withUriSegment(tenantId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the tenants.
   *
   */
  retrieveTenants(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/tenant')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the totals report. This contains all of the total counts for each application and the global registration
   * count.
   *
   */
  retrieveTotalReport(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/report/totals')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user for the given Id.
   *
   * @param {string} userId The Id of the user.
   */
  retrieveUser(userId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user action for the given Id. If you pass in null for the id, this will return all of the user
   * actions.
   *
   * @param {string} userActionId (Optional) The Id of the user action.
   */
  retrieveUserAction(userActionId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user action reason for the given Id. If you pass in null for the id, this will return all of the user
   * action reasons.
   *
   * @param {string} userActionReasonId (Optional) The Id of the user action reason.
   */
  retrieveUserActionReason(userActionReasonId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action-reason')
        .withUriSegment(userActionReasonId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all the user action reasons.
   *
   */
  retrieveUserActionReasons(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action-reason')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the user actions.
   *
   */
  retrieveUserActions(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action')
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user by a change password Id. The intended use of this API is to retrieve a user after the forgot
   * password workflow has been initiated and you may not know the user's email or username.
   *
   * @param {string} changePasswordId The unique change password Id that was sent via email or returned by the Forgot Password API.
   */
  retrieveUserByChangePasswordId(changePasswordId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user')
        .withParameter('changePasswordId', changePasswordId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user for the given email.
   *
   * @param {string} email The email of the user.
   */
  retrieveUserByEmail(email: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user')
        .withParameter('email', email)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user for the loginId. The loginId can be either the username or the email.
   *
   * @param {string} loginId The email or username of the user.
   */
  retrieveUserByLoginId(loginId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user')
        .withParameter('loginId', loginId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user for the given username.
   *
   * @param {string} username The username of the user.
   */
  retrieveUserByUsername(username: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user')
        .withParameter('username', username)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user by a verificationId. The intended use of this API is to retrieve a user after the forgot
   * password workflow has been initiated and you may not know the user's email or username.
   *
   * @param {string} verificationId The unique verification Id that has been set on the user object.
   */
  retrieveUserByVerificationId(verificationId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user')
        .withParameter('verificationId', verificationId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all of the comments for the user with the given Id.
   *
   * @param {string} userId The Id of the user.
   */
  retrieveUserComments(userId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/comment')
        .withUriSegment(userId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the login report between the two instants for a particular user by Id. If you specify an application id, it will only return the
   * login counts for that application.
   *
   * @param {string} applicationId (Optional) The application id.
   * @param {string} userId The userId id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   */
  retrieveUserLoginReport(applicationId: string, userId: string, start: number, end: number): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/report/login')
        .withParameter('applicationId', applicationId)
        .withParameter('userId', userId)
        .withParameter('start', start)
        .withParameter('end', end)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the login report between the two instants for a particular user by login Id. If you specify an application id, it will only return the
   * login counts for that application.
   *
   * @param {string} applicationId (Optional) The application id.
   * @param {string} loginId The userId id.
   * @param {number} start The start instant as UTC milliseconds since Epoch.
   * @param {number} end The end instant as UTC milliseconds since Epoch.
   */
  retrieveUserLoginReportByLoginId(applicationId: string, loginId: string, start: number, end: number): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/report/login')
        .withParameter('applicationId', applicationId)
        .withParameter('loginId', loginId)
        .withParameter('start', start)
        .withParameter('end', end)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the last number of login records for a user.
   *
   * @param {string} userId The Id of the user.
   * @param {number} offset The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.
   * @param {number} limit (Optional, defaults to 10) The number of records to retrieve.
   */
  retrieveUserRecentLogins(userId: string, offset: number, limit: number): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/recent-login')
        .withParameter('userId', userId)
        .withParameter('offset', offset)
        .withParameter('limit', limit)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the user for the given Id. This method does not use an API key, instead it uses a JSON Web Token (JWT) for authentication.
   *
   * @param {string} encodedJWT The encoded JWT (access token).
   */
  retrieveUserUsingJWT(encodedJWT: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user')
        .withAuthorization('JWT ' + encodedJWT)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the webhook for the given Id. If you pass in null for the id, this will return all the webhooks.
   *
   * @param {string} webhookId (Optional) The Id of the webhook.
   */
  retrieveWebhook(webhookId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/webhook')
        .withUriSegment(webhookId)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves all the webhooks.
   *
   */
  retrieveWebhooks(): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/webhook')
        .withMethod("GET")
        .go();
  }

  /**
   * Revokes a single refresh token, all tokens for a user or all tokens for an application. If you provide a user id
   * and an application id, this will delete all the refresh tokens for that user for that application.
   *
   * @param {string} token (Optional) The refresh token to delete.
   * @param {string} userId (Optional) The user id whose tokens to delete.
   * @param {string} applicationId (Optional) The application id of the tokens to delete.
   */
  revokeRefreshToken(token: string, userId: string, applicationId: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/jwt/refresh')
        .withParameter('token', token)
        .withParameter('userId', userId)
        .withParameter('applicationId', applicationId)
        .withMethod("DELETE")
        .go();
  }

  /**
   * Searches the audit logs with the specified criteria and pagination.
   *
   * @param {Object} request The search criteria and pagination information.
   */
  searchAuditLogs(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/system/audit-log/search')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Searches the event logs with the specified criteria and pagination.
   *
   * @param {Object} request The search criteria and pagination information.
   */
  searchEventLogs(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/system/event-log/search')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Retrieves the users for the given ids. If any id is invalid, it is ignored.
   *
   * @param {Array<string>} ids The user ids to search for.
   */
  searchUsers(ids: Array<string>): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/search')
        .withParameter('ids', ids)
        .withMethod("GET")
        .go();
  }

  /**
   * Retrieves the users for the given search criteria and pagination.
   *
   * @param {Object} request The search criteria and pagination constraints. Fields used: queryString, numberOfResults, startRow,
   *    and sort fields.
   */
  searchUsersByQueryString(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/search')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Send an email using an email template id. You can optionally provide <code>requestData</code> to access key value
   * pairs in the email template.
   *
   * @param {string} emailTemplateId The id for the template.
   * @param {Object} request The send email request that contains all of the information used to send the email.
   */
  sendEmail(emailTemplateId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/email/send')
        .withUriSegment(emailTemplateId)
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Send a passwordless authentication code in an email to complete login.
   *
   * @param {Object} request The passwordless send request that contains all of the information used to send an email containing a code.
   */
  sendPasswordlessCode(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/passwordless/send')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Send a Two Factor authentication code to assist in setting up Two Factor authentication or disabling.
   *
   * @param {Object} request The request object that contains all of the information used to send the code.
   */
  sendTwoFactorCode(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/two-factor/send')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Send a Two Factor authentication code to allow the completion of Two Factor authentication.
   *
   * @param {string} twoFactorId The Id returned by the Login API necessary to complete Two Factor authentication.
   */
  sendTwoFactorCodeForLogin(twoFactorId: string): Promise<ClientResponse> {
    return this.start()
        .withHeader('Content-Type', 'text/plain')
        .withUri('/api/two-factor/send')
        .withUriSegment(twoFactorId)
        .withMethod("POST")
        .go();
  }

  /**
   * Complete login using a 2FA challenge
   *
   * @param {Object} request The login request that contains the user credentials used to log them in.
   */
  twoFactorLogin(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/two-factor/login')
        .withJSONBody(request)
        .withMethod("POST")
        .go();
  }

  /**
   * Updates the application with the given Id.
   *
   * @param {string} applicationId The Id of the application to update.
   * @param {Object} request The request that contains all of the new application information.
   */
  updateApplication(applicationId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the application role with the given id for the application.
   *
   * @param {string} applicationId The Id of the application that the role belongs to.
   * @param {string} roleId The Id of the role to update.
   * @param {Object} request The request that contains all of the new role information.
   */
  updateApplicationRole(applicationId: string, roleId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/application')
        .withUriSegment(applicationId)
        .withUriSegment("role")
        .withUriSegment(roleId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the email template with the given Id.
   *
   * @param {string} emailTemplateId The Id of the email template to update.
   * @param {Object} request The request that contains all of the new email template information.
   */
  updateEmailTemplate(emailTemplateId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/email/template')
        .withUriSegment(emailTemplateId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the group with the given Id.
   *
   * @param {string} groupId The Id of the group to update.
   * @param {Object} request The request that contains all of the new group information.
   */
  updateGroup(groupId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/group')
        .withUriSegment(groupId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the identity provider with the given Id.
   *
   * @param {string} identityProviderId The Id of the identity provider to update.
   * @param {Object} request The request object that contains the updated identity provider.
   */
  updateIdentityProvider(identityProviderId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/identity-provider')
        .withUriSegment(identityProviderId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the available integrations.
   *
   * @param {Object} request The request that contains all of the new integration information.
   */
  updateIntegrations(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/integration')
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the key with the given Id.
   *
   * @param {string} keyId The Id of the key to update.
   * @param {Object} request The request that contains all of the new key information.
   */
  updateKey(keyId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/key')
        .withUriSegment(keyId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the lambda with the given Id.
   *
   * @param {string} lambdaId The Id of the lambda to update.
   * @param {Object} request The request that contains all of the new lambda information.
   */
  updateLambda(lambdaId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/lambda')
        .withUriSegment(lambdaId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the registration for the user with the given id and the application defined in the request.
   *
   * @param {string} userId The Id of the user whose registration is going to be updated.
   * @param {Object} request The request that contains all of the new registration information.
   */
  updateRegistration(userId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user/registration')
        .withUriSegment(userId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the system configuration.
   *
   * @param {Object} request The request that contains all of the new system configuration information.
   */
  updateSystemConfiguration(request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/system-configuration')
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the tenant with the given Id.
   *
   * @param {string} tenantId The Id of the tenant to update.
   * @param {Object} request The request that contains all of the new tenant information.
   */
  updateTenant(tenantId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/tenant')
        .withUriSegment(tenantId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the user with the given Id.
   *
   * @param {string} userId The Id of the user to update.
   * @param {Object} request The request that contains all of the new user information.
   */
  updateUser(userId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user')
        .withUriSegment(userId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the user action with the given Id.
   *
   * @param {string} userActionId The Id of the user action to update.
   * @param {Object} request The request that contains all of the new user action information.
   */
  updateUserAction(userActionId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action')
        .withUriSegment(userActionId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the user action reason with the given Id.
   *
   * @param {string} userActionReasonId The Id of the user action reason to update.
   * @param {Object} request The request that contains all of the new user action reason information.
   */
  updateUserActionReason(userActionReasonId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/user-action-reason')
        .withUriSegment(userActionReasonId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Updates the webhook with the given Id.
   *
   * @param {string} webhookId The Id of the webhook to update.
   * @param {Object} request The request that contains all of the new webhook information.
   */
  updateWebhook(webhookId: string, request): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/webhook')
        .withUriSegment(webhookId)
        .withJSONBody(request)
        .withMethod("PUT")
        .go();
  }

  /**
   * Validates the provided JWT (encoded JWT string) to ensure the token is valid. A valid access token is properly
   * signed and not expired.
   * <p>
   * This API may be used to verify the JWT as well as decode the encoded JWT into human readable identity claims.
   *
   * @param {string} encodedJWT The encoded JWT (access token).
   */
  validateJWT(encodedJWT: string): Promise<ClientResponse> {
    return this.start()
        .withUri('/api/jwt/validate')
        .withAuthorization('JWT ' + encodedJWT)
        .withMethod("GET")
        .go();
  }

  /**
   * Confirms a email verification. The Id given is usually from an email sent to the user.
   *
   * @param {string} verificationId The email verification id sent to the user.
   */
  verifyEmail(verificationId: string): Promise<ClientResponse> {
    return this.start()
        .withHeader('Content-Type', 'text/plain')
        .withUri('/api/user/verify-email')
        .withUriSegment(verificationId)
        .withMethod("POST")
        .go();
  }

  /**
   * Confirms an application registration. The Id given is usually from an email sent to the user.
   *
   * @param {string} verificationId The registration verification Id sent to the user.
   */
  verifyRegistration(verificationId: string): Promise<ClientResponse> {
    return this.start()
        .withHeader('Content-Type', 'text/plain')
        .withUri('/api/user/verify-registration')
        .withUriSegment(verificationId)
        .withMethod("POST")
        .go();
  }


  /* ===================================================================================================================
   * Private methods
   * ===================================================================================================================*/

  /**
   * creates a rest client
   *
   * @returns {IRestClient} The RESTClient that will be used to call.
   * @private
   */
  private start() {
    return this.clientBuilder.build(this.host).withAuthorization(this.apiKey);
  }
}